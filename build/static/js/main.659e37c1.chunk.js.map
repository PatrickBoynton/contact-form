{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ContactForm","props","state","handleInput","bind","handleSubmit","e","this","setState","target","name","value","addContact","preventDefault","onSubmit","htmlFor","type","id","firstName","onChange","lastName","address","phoneNumber","Component","ContactList","contacts","map","contact","index","App","push","localStorage","setItem","JSON","stringify","parse","getItem","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAGMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GACb,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAJH,E,+CAOnB,SAAYE,GACVC,KAAKC,SAAL,eAAgBF,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,U,0BAG3C,SAAaL,GACXC,KAAKN,MAAMW,WAAWL,KAAKL,OAC3BI,EAAEO,mB,oBAGJ,WACE,OACE,uBAAMC,SAAUP,KAAKF,aAArB,UACE,uBAAOU,QAAQ,aAAf,wBACA,uBAAOC,KAAK,OAAOC,GAAG,aAAaP,KAAK,aAAaC,MAAOJ,KAAKL,MAAMgB,UAAWC,SAAUZ,KAAKJ,cACjG,uBAAOY,QAAQ,YAAf,uBACA,uBAAOC,KAAK,OAAOC,GAAG,YAAYP,KAAK,YAAYC,MAAOJ,KAAKL,MAAMkB,SAAUD,SAAUZ,KAAKJ,cAC9F,uBAAOY,QAAQ,UAAf,qBACA,uBAAOC,KAAK,OAAOC,GAAG,UAAUP,KAAK,UAAUC,MAAOJ,KAAKL,MAAMmB,QAASF,SAAUZ,KAAKJ,cACzF,uBAAOY,QAAQ,eAAf,0BACA,uBAAOC,KAAK,OAAOC,GAAG,eAAeP,KAAK,eAAeC,MAAOJ,KAAKL,MAAMoB,YAAaH,SAAUZ,KAAKJ,cACvG,wBAAQa,KAAK,SAAb,iC,GA5BkBO,aAmCxB,SAASC,EAAYvB,GAAQ,IAAD,EACpBwB,EAAQ,UAAGxB,EAAMwB,gBAAT,aAAG,EAAgBC,KAAI,SAACC,EAASC,GAAV,OACnC,+BACE,6BAAKD,EAAQ,gBACb,6BAAKA,EAAQ,eACb,4BAAIA,EAAQN,UACZ,4BAAIM,EAAQ,wBAGhB,OACE,6BACGF,I,IAiCMI,E,kDA1Bb,WAAY5B,GAAQ,IAAD,8BACjB,cAAMA,IACDW,WAAa,EAAKA,WAAWR,KAAhB,gBAFD,E,qDAInB,WAEEG,KAAKC,SAAS,CAAEiB,SADC,O,wBAInB,SAAWE,GACT,IAAMF,EAAQ,YAAOlB,KAAKL,MAAMuB,UAChCA,EAASK,KAAKH,GACdI,aAAaC,QAAQ,WAAYC,KAAKC,UAAUT,M,oBAGlD,WACE,IAAMA,EAAWQ,KAAKE,MAAMJ,aAAaK,QAAQ,aACjD,OACE,sBAAKC,UAAU,MAAf,UACA,cAAC,EAAD,CAAazB,WAAYL,KAAKK,aAC9B,cAACY,EAAD,CAAaC,SAAUA,W,GArBXF,aC3CHe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.659e37c1.chunk.js","sourcesContent":["import './App.css';\nimport { Component } from 'react';\n\nclass ContactForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n    this.handleInput = this.handleInput.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  \n  handleInput(e) {\n    this.setState({[e.target.name]: e.target.value})\n  }\n\n  handleSubmit(e) {\n    this.props.addContact(this.state);\n    e.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label htmlFor=\"first-name\">First Name</label>\n        <input type=\"text\" id=\"first-name\" name=\"first-name\" value={this.state.firstName} onChange={this.handleInput}/>\n        <label htmlFor=\"last-name\">Last Name</label>\n        <input type=\"text\" id=\"last-name\" name=\"last-name\" value={this.state.lastName} onChange={this.handleInput}/>\n        <label htmlFor=\"address\">Address</label>\n        <input type=\"text\" id=\"address\" name=\"address\" value={this.state.address} onChange={this.handleInput}/>\n        <label htmlFor=\"phone-number\">Phone Number</label>\n        <input type=\"text\" id=\"phone-number\" name=\"phone-number\" value={this.state.phoneNumber} onChange={this.handleInput}/>\n        <button type=\"submit\">Add Contacts</button>\n      </form>\n    )\n  }\n}\n\n\n  function ContactList(props) {\n    const contacts = props.contacts?.map((contact, index) => (\n      <li>\n        <h2>{contact[\"first-name\"]}</h2>\n        <h2>{contact[\"last-name\"]}</h2>\n        <p>{contact.address}</p>\n        <p>{contact[\"phone-number\"]}</p>\n      </li>\n    ))\n    return (\n      <ul>\n        {contacts}\n      </ul>\n    )\n  }\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.addContact = this.addContact.bind(this);\n  }\n  componentDidMount() {\n    const contacts = [];\n    this.setState({ contacts });\n  }\n\n  addContact(contact) {\n    const contacts = [...this.state.contacts];\n    contacts.push(contact);\n    localStorage.setItem(\"contacts\", JSON.stringify(contacts))\n  }\n\n  render () {\n    const contacts = JSON.parse(localStorage.getItem(\"contacts\"));\n    return (\n      <div className=\"App\">\n      <ContactForm addContact={this.addContact}/>\n      <ContactList contacts={contacts}/>\n    </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}